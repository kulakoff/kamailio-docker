# async_workers=ASYNC_WORKERS
async_workers_group=ASYNC_WORKERS_GROUP

request_route {
        # ----- per request initial checks
        route(REQINIT);

        ###!ifdef WITH_WEBSOCKETS
        ##route(WS);
        ###!endif

        # ----- CANCEL processing
        if (is_method("CANCEL")) {
                if (t_check_trans()) {
                        route(RELAY);
                }

                exit;
        }

        if (!is_method("ACK")) {
                if (t_precheck_trans()) {
                        t_check_trans();
                        exit;
                }

                t_check_trans();
        }

        if (is_method("INVITE|REGISTER")) {
                route(NATDETECT);
        }

        if (is_method("REGISTER")) {
                route(AUTH);
        }

        route(DIALOG);
}

route[REQINIT] {
        xlog("L_DEBUG", "New request - M=$rm R=$ru F=$fu IP=$si:$sp ID=$ci\n");
        force_rport;

        if (!mf_process_maxfwd_header("10")) {
		        xlog("L_INFO", "Too Many Hops\n");
		        send_reply("483", "Too Many Hops");
		        exit;
	    }
}

route[WS]{
        xlog("L_DBG", "| RUN REQINIT_WS");
        if (nat_uac_test(64)) {
                if (is_method("REGISTER")) {
                        xlog("L_DBG", "| WS | REGISTER");
                        fix_nated_register();
                        } else {
                                if (!add_contact_alias()) {
                                        xlog("L_ERR", "| WS | Error aliasing contact <$ct>\n");
                                        sl_send_reply("400", "Bad Request");
                                        exit;
                                }
                }
        }
}

route[RELAY_API]{
        $http_req(all) = $null;
        $http_req(suspend) = 1;
        $http_req(timeout) = 3000;
        $http_req(method) = "POST";
        $http_req(hdr) = "Content-Type: application/json";

        # KAMAILIO API AUTH use token?
        #!ifdef WITH_API_AUTH_TOKEN
        $http_req(hdr) = "Authorization: Bearer "+KAMAILIO_API_AUTH_TOKEN;
        #!endif


        jansson_set("string", "from_uri", $fu, "$var(http_routing_query)");
        jansson_set("string", "ua", $ua, "$var(http_routing_query)");## useragent
        jansson_set("string", "source_ip", $siz, "$var(http_routing_query)");
        #jansson_set("string", "event", "sip-routing", "$var(http_routing_query)");
        #jansson_set("string", "source_address", $sut, "$var(http_routing_query)");
        #jansson_set("int", "source_port", $sp, "$var(http_routing_query)");
        #jansson_set("int", "auth", 0, "$var(http_routing_query)");
        #jansson_set("string", "call_id", $ci, "$var(http_routing_query)");
        #jansson_set("string", "from_name", $fn, "$var(http_routing_query)");
        #jansson_set("string", "from_tag", $ft, "$var(http_routing_query)");
        #jansson_set("string", "to_name", $tn, "$var(http_routing_query)");
        #jansson_set("string", "to_uri", $tu, "$var(http_routing_query)");
        #jansson_set("string", "to_tag", $tt, "$var(http_routing_query)");

        ## DEBUG AUTH request
        #xlog("L_INFO","API ASYNC ROUTING REQUEST: $var(http_routing_query)\n");

        $http_req(body) = $var(http_routing_query);

        http_async_query(KAMAILIO_API_AUTH_URL, "RELAY_API_RESPONSE");
}

route[RELAY_API_RESPONSE] {
        if ($http_ok && $http_rs == 200) {
                if (jansson_get("data.ha1", $http_rb, "$avp(hash1)")) {
                        if (!pv_auth_check("$fd", "$avp(hash1)", "1", "0")) {
                                auth_challenge("$fd", "0");
                                exit;
                        } else {
                                route(NATDETECT);
                                consume_credentials();
                                save("location");
                        }
                }

        xlog("L_DBG", "| AUTH API RESPONSE | OK");
        } else if ($http_rs > 400 && $http_rs < 599) {
                xlog("L_ERR", "|AUTH API| client >> $fu | status: $http_rr | status_code: $http_rs\n");
                send_reply(403, "Forbidden");
        } else {
                xlog("L_ERR", "Auth API Not Available");
                send_reply(503, "Auth API Not Available");
        }

        exit();
}

route[AUTH] {
        if (is_method("REGISTER")){
                xlog("L_DBG", "| ROUTE AUTH | REGISTER");
                async_task_route("RELAY_API");
        }

        # IP auth INVITE request, only allowed ip address
        if ((is_method("INVITE"))){
                if(!allow_source_address("200")){
                        xlog("L_DBG", "Nope. Don't know who you are");
                        sl_reply("403", "Nope. Don't know who you are");
                        exit;
                } else {
                        return;
                        }               
        }
}

route[NATDETECT] {
        xlog("L_DBG", "| ROUTE NATDETECT");
        force_rport();
        if (nat_uac_test("19")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        if(is_first_hop()) {
                                if (!set_contact_alias()) {
                                        xlog("L_DBG", "Error in aliasing contact $ct\n");
                                        sl_send_reply("400", "Bad Request");
                                }
                        }
                }
        }
        return;
}


route[DIALOG] {
        if (is_method("INVITE")) {
                route(AUTH);

                if (!lookup("location")) {
                        sl_send_reply("404", "Not Found");
                        exit;
                }

                handle_ruri_alias();
                record_route();
                route(RELAY);
        }

        if (has_totag()) {
                if (loose_route()) {
                        handle_ruri_alias();
                        route(RELAY);
                }
        }

        if (is_method("ACK")) {
                if ( t_check_trans() ) {
                        route(RELAY);
                        exit;
                } else {
                        exit;
                }
        }
}

route[RELAY] {
        xlog("L_DBG", "| ROUTE RELAY |");
        # pcre_match("$dP", "(?i)wss|ws");
        # xlog("L_INFO", "| ROUTE RELAY | DP | $dP");

        if(is_method("CANCEL") || is_method("ACK")) {
                t_relay();
        }


        if ($proto =~ "ws") {
                # Coming from websocket
                if (pcre_match("$dP", "(?i)wss|ws")) { # WebRTC > WebRTC
                        xlog("L_DBG", "WebRTC > WebRTC");
                        rtpengine_manage("trust-address replace-origin replace-session-connection ICE=force");
                        # t_on_reply("REPLY_WS_TO_WS");
                        t_on_reply("REPLY");
                } else {
                        # WebRTC > SIP
                        xlog("L_DBG", "WebRTC > SIP");
                        rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP");
                        t_on_reply("REPLY_WS_TO_SIP");
                        # t_on_reply("REPLY");
                }
        } else {
                # Coming from SIP
                xlog("L_DBG", "| Coming from SIP |");
                if (pcre_match("$dP", "(?i)wss|ws")) { # SIP > WebRTC
                        xlog("L_DBG", "SIP > WebRTC");

                        if(nat_uac_test("19")) {
                                rtpengine_manage("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
                        } else {
                                rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
                        }

                        # t_on_reply("REPLY_SIP_TO_WS");
                        t_on_reply("REPLY");
                } else {
                        # SIP > SIP
                        xlog("L_DBG", "SIP > SIP");

                        if(nat_uac_test("19")) {
                                xlog("L_DBG", "| RELAY | nat_uac_test 19 ok");
                                rtpengine_manage("replace-origin replace-session-connection");
                        } else {
                                xlog("L_DBG", "| RELAY | nat_uac_test 19 false");
                                rtpengine_manage("trust-address replace-origin replace-session-connection");
                        }

                        t_on_reply("REPLY_SIP_TO_SIP");
                        # t_on_reply("REPLY");
                }
        }

        # t_on_reply("REPLY");
        t_relay();
}
 
onreply_route[REPLY] {
        route(NATDETECT);

        if (has_body("application/sdp")) {
                rtpengine_manage("replace-origin");
                #rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
}

onreply_route[REPLY_SIP_TO_WS] {
        xlog("L_DBG", "Reply from websocket to SIP: $rs");

        if(status=~"[12][0-9][0-9]") {
                rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP");
        }
}

onreply_route[REPLY_WS_TO_SIP] {
        xlog("L_DBG", "Reply from SIP to websocket: $rs");

        if (t_check_status("183")) {
                change_reply_status("180", "Ringing");
                remove_body();
                exit;
        }

        if(!(status=~"[12][0-9][0-9]") || !(sdp_content())) {
                return;
        }

        if(nat_uac_test("19")) {
                rtpengine_manage("replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
        } else {
                rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-accept rtcp-mux-offer ICE=force RTP/SAVPF");
        }
}

onreply_route[REPLY_SIP_TO_SIP] {
        xlog("L_DBG", "Reply from SIP to SIP: $rs");

        if (has_body("application/sdp")) {
                rtpengine_manage("replace-session-connection replace-origin ICE=remove direction=internal direction=external");
        }
}


include_file "xhttp.conf"